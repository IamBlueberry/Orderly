
@using Orderly.Client.Services
@using Orderly.Shared.Dtos

@namespace Orderly.Client.Components

<link rel="stylesheet" href="css/modal.css" />
<link rel="stylesheet" href="css/tagify.css" />
<link href="https://cdn.jsdelivr.net/npm/@@yaireo/tagify/dist/tagify.css" rel="stylesheet" />

<script src="js/formatting.js"></script>
<script src="js/tagifyInterop.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@@yaireo/tagify"></script>

@if (IsVisible && ProductToEdit is not null)
{
    <div class="modal-backdrop">
        <div class="modal-content" @onclick:stopPropagation="true">
            <h3>Edit Product</h3>

            <div class="mb-4">
                <label for="nameInput">Name</label>
                <input id="nameInput" @bind="EditableProduct.Name" placeholder="Enter a product name..." />
            </div>

            <div class="mb-4">
                <label for="descriptionInput">Description</label>
                <textarea id="descriptionInput" rows="3" @bind="EditableProduct.Description" placeholder="Enter a product description..."></textarea>
            </div>

            <div class="mb-4">
                <label for="categorySelect">Category</label>
                <select id="categorySelect" @bind="EditableProduct.Category">
                    <option value="" disabled>Select a category</option>
                    @foreach (var category in CategoryOptions)
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>

            <div class="mb-4">
                <label for="priceInput">Price</label>
                <input id="priceInput" type="number" step="0.01" @bind="EditableProduct.Price" />
            </div>

            <div class="mb-4">
                <label for="stockInput">Stock</label>
                <input id="stockInput" type="number" @bind="EditableProduct.Stock" />
            </div>

            <div class="mb-4">
                <label for="tagsInput" class="form-label">Tags</label>
                <input id="tagsInput" class="form-control" />
            </div>

            @if (ErrorMessages is not null && ErrorMessages.Any())
            {
                <div style="color: #f87171; margin-bottom: 1rem;">
                    @foreach (var error in ErrorMessages)
                    {
                        <div>@error</div>
                    }
                </div>
            }

            <div class="modal-actions">
                <button class="modal-btn cancel" @onclick="OnCancelClicked">Cancel</button>
                <button class="modal-btn primary" @onclick="OnSaveClicked">Save</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public ProductDto? ProductToEdit { get; set; }

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private readonly List<string> CategoryOptions = new()
    {
        "Electronics",
        "Clothing",
        "Books",
        "Toys",
        "Home"
    };

    private List<string>? ErrorMessages { get; set; }

    /// <summary>
    ///     Editable product, used to write changes to before the user
    ///     clicks save
    /// </summary>
    private ProductDto EditableProduct = new();

    private bool IsTagifyInitialized { get; set; } = false;

    private const int MAX_TAGS = 20;

    [JSInvokable]
    public void UpdateTags(string[] tags)
    {
        EditableProduct.Tags = tags
            .Distinct()
            .ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible)
        {
            if (!IsTagifyInitialized)
            {
                await JS.InvokeVoidAsync("tagifyInterop.init", "tagsInput", EditableProduct.Tags, MAX_TAGS);

                IsTagifyInitialized = true;
            }
        }
        else
        {
            // Modal is not visible so reset the status of tagify

            IsTagifyInitialized = false;
        }
    }

    protected override void OnParametersSet()
    {
        // Load changes into the editable product

        if (ProductToEdit is not null)
        {
            EditableProduct = new ProductDto
            {
                PublicId = ProductToEdit.PublicId,
                Name = ProductToEdit.Name,
                Description = ProductToEdit.Description,
                Category = ProductToEdit.Category,
                Price = ProductToEdit.Price,
                Stock = ProductToEdit.Stock,
                Owner = ProductToEdit.Owner,
                CreatedAt = ProductToEdit.CreatedAt,

                Tags = ProductToEdit.Tags
                    .Distinct()
                    .ToList(),

                IsDeleted = ProductToEdit.IsDeleted
            };
        }
    }

    private async Task OnSaveClicked()
    {
        if (ProductToEdit is null)
        {
            return;
        }

        ErrorMessages = null;

        EditableProduct.Tags = await JS.InvokeAsync<List<string>>("tagifyInterop.getTags", "tagsInput");

        // Update the product

        var (success, errors) = await _ProductService.UpdateProductAsync(EditableProduct);

        // Handle result status

        if (success)
        {
            // Let event listeners know this product was edited

            await OnSave.InvokeAsync();
        }
        else
        {
            ErrorMessages = errors;
        }
    }

    private async Task OnCancelClicked()
    {
        await OnCancel.InvokeAsync();
    }

    [Inject] ProductService _ProductService { get; set; }
    [Inject] IJSRuntime JS { get; set; }
}
