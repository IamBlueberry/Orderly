@using Orderly.Client.Services
@using Orderly.Shared.Dtos

@namespace Orderly.Client.Components

<link rel="stylesheet" href="css/modal.css" />
<link rel="stylesheet" href="css/tagify.css" />
<link href="https://cdn.jsdelivr.net/npm/@@yaireo/tagify/dist/tagify.css" rel="stylesheet" />

<script src="js/formatting.js"></script>
<script src="js/tagifyInterop.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@@yaireo/tagify"></script>

@if (IsVisible)
{
    <div class="modal-backdrop" tabindex="-1">
        <div class="modal-content" style="max-width: 520px;">
            <h3>Add New Product</h3>

            <div class="mb-3">
                <label for="nameInput">Name</label>
                <input id="nameInput" @bind="NewProduct.Name" placeholder="Enter a product name..." />
            </div>

            <div class="mb-3">
                <label for="descriptionInput">Description</label>
                <textarea id="descriptionInput" rows="3" @bind="NewProduct.Description" placeholder="Enter a product description..."></textarea>
            </div>

            <div class="mb-3">
                <label for="categorySelect">Category</label>
                <select id="categorySelect" @bind="NewProduct.Category">
                    <option value="" disabled selected>Select a category</option>
                    @foreach (var category in CategoryOptions)
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>

            <div class="mb-3" style="display: flex; gap: 1rem;">
                <div style="flex: 1;">
                    <label for="priceInput">Price</label>
                    <div class="input-currency">
                        <span>£</span>
                        <input id="priceInput" type="number" step="0.01" min="0" @bind="NewProduct.Price" />
                    </div>
                </div>

                <div style="flex: 1;">
                    <label for="stockInput">Stock</label>
                    <input id="stockInput" type="number" min="0" @bind="NewProduct.Stock" />
                </div>
            </div>

            <div class="mb-3">
                <label for="tagsInput">Tags</label>
                <input id="tagsInput" />
            </div>

            @if (ErrorMessages is not null && ErrorMessages.Any())
            {
                <div class="alert alert-danger" role="alert">
                    @foreach (var error in ErrorMessages)
                    {
                        <div>@error</div>
                    }
                </div>
            }

            <div class="modal-actions" style="margin-top: 1.5rem;">
                <button class="modal-btn cancel" @onclick="OnCancelClicked">Cancel</button>
                <button class="modal-btn primary" @onclick="OnCreateClicked">Create</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback OnCreate { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private ProductDto NewProduct = new();

    private readonly List<string> CategoryOptions = new()
    {
        "Electronics",
        "Clothing",
        "Books",
        "Toys",
        "Home"
    };

    private List<string>? ErrorMessages;

    private const int MAX_TAGS = 20;

    [JSInvokable]
    public void UpdateTags(string[] tags)
    {
        NewProduct.Tags = tags
            .Distinct()
            .ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible)
        {
            // Initialize tagify

            await JS.InvokeVoidAsync("tagifyInterop.init", "tagsInput", NewProduct.Tags, MAX_TAGS);

            // Initialize currency formatter

            await JS.InvokeVoidAsync("initCurrencyFormatter");
        }
    }

    private async Task OnCreateClicked()
    {
        ErrorMessages = null;

        NewProduct.Tags = await JS.InvokeAsync<List<string>>("tagifyInterop.getTags", "tagsInput");

        // Create the product

        var (success, errors) = await _ProductService.CreateProductAsync(NewProduct);

        // Handle result status

        if (success)
        {
            // Let event listeners know this product was created

            await OnCreate.InvokeAsync();

            NewProduct = new();
        }
        else
        {
            ErrorMessages = errors;
        }
    }

    private async Task OnCancelClicked()
    {
        await OnCancel.InvokeAsync();

        NewProduct = new();
    }

    [Inject]
    private ProductService _ProductService { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; }
}
