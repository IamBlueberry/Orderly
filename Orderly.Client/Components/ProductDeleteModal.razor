@using Orderly.Client.Services
@using Orderly.Shared.Dtos

@if (IsVisible && ProductToDelete is not null)
{
    <div class="modal-backdrop" tabindex="-1">
        <div class="modal-content">
            <h3 class="text-danger">Delete Product</h3>

            <p>
                Are you sure you want to delete <strong>@ProductToDelete.Name</strong>?
                This change is permanent and cannot be undone.
            </p>

            @if (ErrorMessages is not null && ErrorMessages.Any())
            {
                <div class="alert alert-danger" role="alert">
                    @foreach (var error in ErrorMessages)
                    {
                        <div>@error</div>
                    }
                </div>
            }

            <div class="modal-actions">
                <button class="modal-btn cancel" @onclick="OnCancelClicked">Cancel</button>
                <button class="modal-btn danger" @onclick="OnDeleteClicked">Delete</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public ProductDto? ProductToDelete { get; set; }

    [Parameter]
    public EventCallback OnDelete { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private List<string>? ErrorMessages { get; set; }

    private async Task OnDeleteClicked()
    {
        if (ProductToDelete is null)
        {
            return;
        }

        // Delete the product

        var (success, errors) = await _ProductService.DeleteProductAsync(ProductToDelete);

        // Handle result status

        if (success)
        {
            // Let event listeners know the product was deleted

            await OnDelete.InvokeAsync();
        }
        else
        {
            ErrorMessages = errors;
        }
    }

    private async Task OnCancelClicked()
    {
        await OnCancel.InvokeAsync();
    }

    [Inject] ProductService _ProductService { get; set; }
    [Inject] IJSRuntime JS { get; set; }
}
